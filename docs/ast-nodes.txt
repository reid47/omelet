TOAST AST NODES

These are all of the AST nodes that Toast uses to represent the languages
HTML, Omelet, Dust, and Liquid. Because each AST is really just a JavaScript
object, we have no way of really guaranteeing that the parsers adhere to
this spec. This document is meant to make the spec as clear as possible
so that people writing parsers will have no trouble adhering to them.

For example, here is the PEG rule for Omelet's macro definitions. These
are parsed into MacroDefinition nodes.

    Definition "a macro definition"
        = CommandPrefix "def" " " name:Identifier "(" params:ParameterList? ")" ":" _ body:(Indent Content Dedent)?
        {
            return {
                kind: "MacroDefinition",
                name: name,
                params: params === null ? [] : params,
                body: body === null ? [] : body[1]
            }
        }

While this rule does reference rules that are not visible here (like CommandPrefix),
the general idea should be fairly self-explanatory. We specify the
syntax for a macro definition using PEGjs's regex-like notation,
we name the parts we collect out of this notation (like "name" and
"params"), and then we return a JavaScript object of kind
"MacroDefinition", with the pieces that we pulled out of the parser
reassembled into a Toast node that adheres to the spec below.

===============================================================================

NODE: Attribute
    properties
        kind: "Attribute"
        name: String node
        value: String node | Identifier node

===============================================================================

NODE: Boolean
    properties:
        kind: "Boolean"
        value: true | false

===============================================================================

NODE: Comment
    properties:
        kind: "Comment"
        value: a string literal

===============================================================================

NODE: CommentHTML
    properties
        kind: "CommentHTML"
        value: a string literal

===============================================================================

NODE: Doctype
    properties
        kind: "Doctype"
        value: a string literal

===============================================================================

NODE: Document
    properties
        kind: "Document"
        imports: [Import node]
        extend: undefined | Extend node
        contents: [any node]

===============================================================================

NODE: Extend
    properties
        kind: "Extend"
        file: a String node

===============================================================================

NODE: Filter
    properties
        kind: "Filter"
        name: Identifier node
        arguments: [String | Number | Boolean | Identifier]

===============================================================================

NODE: ForEach
    properties
        kind: "ForEach"
        iterator: Identifier node
        data: Identifier node
        body: [any node]

===============================================================================

NODE: Identifier
    properties
        kind: "Identifier"
        value: a string literal
        modifiers: [Number | Identifier]

===============================================================================

NODE: IfStatement
    properties
        kind: "IfStatement"
        predicate: Identifier node
        negated: true | false
        thenCase: [any node]
        elifCases: [IfStatement]
        elseCase: undefined | [any node]

===============================================================================

NODE: Import
    properties
        kind: "Import"
        file: String node

===============================================================================

NODE: Include
    properties
        kind: "Include"
        file: String node

===============================================================================

NODE: Interpolation
    properties
        kind: "Interpolation"
        name: Identifier node
        isMacroCall: undefined | true | false
        arguments: [String node | Boolean node | Number node | Identifier node]
        filters: [Filter node]

===============================================================================

NODE: MacroDefinition
    properties
        kind: "MacroDefinition"
        name: Identifier node
        params: [String node | Boolean node | Number node | Identifier node]
        body: [any node]

===============================================================================

NODE: Modifier
    properties
        kind: "Modifier"
        value: Number node | Identifier node

===============================================================================

NODE: Number
    properties
        kind: "Number"
        value: a number literal

===============================================================================

NODE: Parenthetical
    properties
        kind: "Parenthetical"
        value: [any node]

===============================================================================

NODE: Raw
    properties
        kind: "Raw"
        value: a string literal

===============================================================================

NODE: String
    properties
        kind: "String"
        value: a string literal

===============================================================================

NODE: Tag
    properties
        kind: "Tag"
        name: String node
        attributes: [Attribute node]
        inner: [any node]