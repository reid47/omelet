USING TOAST WITHIN NODE.JS

To use Toast within Node.js, you must first clone a copy of the entire
git repo to your local computer. You must also have Node.js installed.
Assuming you have these in place, you can proceed as follows.

Within a Node file, you can use the following lines...

    var Toast = require('./toast.js');

    var T = new Toast.ToastInstance({
        sourceLanguage: "omelet",
        targetLanguage: "html",
        outputDirectory: "omelet-ref/outputs",
        prettyPrint: true,
        isWeb: false
    })

...to create a new instance of Toast that you can use to translate files.
Note that the ToastInstance constructor takes a configuration object
with fairly self-explanatory properties. Still, I will explain each one:

    sourceLanguage
        A string, either "omelet", "dust", "liquid", or "html"
        This is the language that you are translating FROM.

    targetLanguage
        A string, either "omelet", "dust", or "liquid"
        This is the language that you are translating INTO.

    outputDirectory
        A string containing a path to an (already existing!) directory.
        This path should be relative to the directory where the
        toast.js file is stored. This directory is where all generated
        files will end up.

    prettyPrint
        Either a boolean (true or false), or undefined.
        This says whether or not to run a code beautifier over your
        rendered HTML pages. This is only relevant when your
        targetLanguage is "html"; in all other cases, this property
        is ignored (and can be omitted).

    isWeb
        Either a boolean (true or false), or undefined.
        You should not have to touch this one; if you are running
        Toast from Node.js, then isWeb is always false. This flag
        tells Toast whether to look in your file system for files
        (when isWeb is false - what you want from Node.js), or to
        look in your browser's localStorage for the files (which
        is how the files are stored when you're using the web IDE).

Once you have a Toast instance created, you can use it as follows.

When you are translating into HTML, Toast will look for a context object
that contains values for variables that you will want to access in your
templates. This context object can be an empty JavaScript object ({}),
in which case you will not have any variables in scope for your evaluation.

When you are translating into a language other than HTML, this context
object is ignored (since placeholders are translated into other placeholders,
not evaluated).

You can define the context object as a literal JavaScript object,
like this...

    var context = {
        name: "Reid Mitchell",
        age: 22,
        items: ["book", "car", "movie", "sandwich"]
    }

...or, you can take advantage of Node.js's require function and store
the context object as its own JSON object. You can then grab this JSON
data like this...

    var context = require("path/to/contextFile.json");

Once you have your context object, you can supply the input templates
to Toast using two different functions, depending on your needs.
Assuming we call our ToastInstance T, as we do in the example above,
these two uses look like this:

    T.renderFile("path/to/file.oml", context);

...and...

    T.renderDirectory("path/to/directory", context);

The first of these, renderFile, translates a single file from the
source language into the target language (as specified above). The
second of these, renderDirectory, goes through a directory and translates
all files it finds at the top level of that directory and calls
renderFile on them, using the same context for each one.

In both of these cases, the file path is a string containing a path
relative to the toast.js file. Toast will raise an error if it can't
find a file or directory at any point.


To see all of this in action, check out the run.js file. This file
creates a ToastInstance and then uses it to translate all of the
Omelet language reference pages (written in Omelet) into HTML.
The output files end up in omelet-ref/outputs/, though this can be
changed.

To run that file, just navigate from the command line to the directory
where run.js appears and execute "node run.js".