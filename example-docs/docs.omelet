******************************************************************************************

VARIABLES

prefixed with $

declaration:
$var1 = 47
$var2 = This is an implicit string
$var3 = false

updating:
$var1 = 48
$var1 = This is now a string

******************************************************************************************

DATA TYPES

strings:
Everything in Omelet is a string, or is an expression that evaluates to a string.

numbers:
Strings that look like numbers are treated as numbers in expressions, but printed as numbers

booleans:
Just strings that contain only "true" or "false"

omelet code:
blocks of omelet

******************************************************************************************

arrays:

similar to JS, where all arrays are just objects with integer indices

******************************************************************************************

FUNCTIONS w/PARAMETERS:

prefixed with >

>func1(n) = n + 1

>func2(n : number) = n + 1 //typing rules enforced here, since n is explicitly a number

>func3() = 47 * 100

def length(s : string) =
    $n = 0
    for char in s
        $n++
    return $n

******************************************************************************************

CONTROL STRUCTURES

>if def($b)          //where b evaluates to a boolean or at least defined?
    @h1 hello
>else
    @h1 goodbye

>if $s == nice
    @h1 yeah okay!
>elif $s == not great && $n > 47
    @h1 hmm, maybe...
>else
    @h1 no, thank you

>for $char in $str
    //do something with each character in a string

>for $el in $arr
    //do something with each element in an array

>for $el,$i in $arr
    //i gives us the index into arr at the same time

