{
    var util = {};
    util.typeOf = function(obj, noGenerics) {
        var t = ({}).toString.call(obj).match(/\s([a-z|A-Z]+)/)[1];
        if (t !== "Object") {
            if (t === "Array") {
                if (noGenerics) return "Array";
                var t0 = util.typeOf(obj[0]);
                for (var i=0; i<obj.length; i++) {
                    if (t0 !== util.typeOf(obj[i])) {
                        t0 = "Dynamic";
                        break;
                    }
                }
                return "Array<"+t0+">";
            } else {
                return t;
            }
        }
        return obj.constructor.name;
    }
}

Document = contents:Content
    {
        return {
            kind: "Document",
            imports: [],
            extend: undefined,
            contents: contents
        }
    }

Content
    = (DustExpression / Doctype / Comment / RawTag / Tag / Text)*

DustExpression
    = DustComment / Key / Section / SpecialCharacter / Indentation

DustComment "a Dust comment"
    = "{!" c:(!"!}" c:. {return c})* "!}"
    {
        return {
            kind: "Comment",
            value: c.join("")
        }
    }

Indentation
    = "\n" [ ]*
    {
        return {
            kind: "String",
            value: ""
        }
    }

SpecialCharacter "a special character (n, r, s, lb, or rb)"
    = "{~" char:("n"/"r"/"s"/"lb"/"rb") "}"
    {
        var output;
        switch (char) {
            case "n": output = "\n"; break;
            case "r": output = "\r"; break;
            case "s": output = " "; break;
            case "lb": output = "{"; break;
            case "rb": output = "}"; break;
        }
        return {
            kind: "String",
            value: output
        }
    }

Identifier "an identifier"
    = id:([a-zA-Z] [a-zA-Z0-9_-]*)
    {
        return {
            kind: "Identifier",
            value: id[0].concat(id[1].join(""))
        }
    }

Filter "a filter"
    = "|" id:Identifier
    {
        return {
            kind: "Filter",
            name: id,
            arguments: []
        }
    }

Dot "a dot"
    = "."
    {
        return {
            kind: "Identifier",
            value: "self__"
        }
    }

Key "a variable key"
    = "{" id:(Identifier / Dot) filters:Filter* "}"
    {
        return {
            kind: "Interpolation",
            name: id,
            arguments: [],
            filters: filters
        }
    }

InlineParameterValue
    = InterpolatedStringLiteral / QuotedAttributeValue / Identifier

InterpolatedStringLiteralInterpolation
    = "{" id:Identifier "}" str:[^{\"]*
    {
        return [
            {
                kind: "Interpolation",
                name: id,
                arguments: [],
                filters: []
            },
            {
                kind: "String",
                value: str.join("")
            }
        ]
    }

InterpolatedStringLiteral "an interpolated string"
    = "\"" str0:[^{\"]*  interps:InterpolatedStringLiteralInterpolation+ "\""
    {
        interps = interps.reduce(function(a,b) {
            return a.concat(b);
        }, [])
        interps.unshift({
            kind: "String",
            value: str0.join("")
        });
        return {
            kind: "Parenthetical",
            inner: interps,
            filters: []
        }
    }

Section
    = SectionWithoutElse / SpecialSection

SpecialSection
    = ExistsSection / NoExistsSection / Block / Partial / InlinePartial

Partial "a reference to a partial"
    = "{>" name:(Identifier / InterpolatedStringLiteral / QuotedAttributeValue) "/}"
    {
        name.kind = "String"
        return {
            kind: "Include",
            file: name
        }
    }

InlinePartial "an inline partial definition"
    = "{<" openName:Identifier "}" _ content:Content "{/" closeName:Identifier "}"
    {
        if (openName.value !== closeName.value) {
            throw SyntaxError("Missing closing tag for block "+openName.value);
        }
        return {
            kind: "MacroDefinition",
            name: openName,
            params: [],
            body: content
        }
    }

Block "a block"
    = "{+" openName:Identifier "}" _ content:Content "{/" closeName:Identifier "}"
    {
        if (openName.value !== closeName.value) {
            throw SyntaxError("Missing closing tag for block "+openName.value);
        }
        return {
            kind: "IfStatement",
            predicate: openName,
            thenCase: [{
                kind: "Interpolation",
                name: openName,
                isMacroCall: true
            }],
            elseCase: content
        }
    }
    / "{+" openName:Identifier "/}"
    {
        return {
            kind: "Interpolation",
            name: openName,
            isMacroCall: true
        }
    }

ExistsSection "an exists section"
    = "{?" openName:Identifier "}" _ contents:Content elseSection:("{:else}" Content)? "{/" closeName:Identifier "}"
    {
        if (openName.value !== closeName.value) {
            throw SyntaxError("Missing closing tag for section "+openName.value);
        }
        return {
            kind: "IfStatement",
            predicate: openName,
            thenCase: contents,
            elseCase: elseSection === null ? undefined : elseSection[1]
        }
    }

NoExistsSection "a notexists section"
    = "{^" openName:Identifier "}" _ contents:Content elseSection:("{:else}" Content)? "{/" closeName:Identifier "}"
    {
        if (openName.value !== closeName.value) {
            throw SyntaxError("Missing closing tag for section "+openName.value);
        }
        return {
            kind: "IfStatement",
            predicate: openName,
            negated: true,
            thenCase: contents,
            elseCase: elseSection === null ? undefined : elseSection[1]
        }
    }

SectionWithoutElse "a section"
    = "{#" openName:Identifier "}" _ contents:Content "{/" closeName:Identifier "}"
    {
        if (openName.value !== closeName.value) {
            throw SyntaxError("Missing closing tag for section "+openName.value);
        }
        return {
            kind: "ForEach",
            iterator: {
                kind: "Identifier",
                value: "self__"
            },
            data: openName,
            body: contents
        }
    }

/* EVERYTHING BELOW THIS LINE IS BASIC HTML */

RawTag
    = ScriptTag / StyleTag

ScriptTag
    = "<script"i _ attrs:(Attribute _)* ">" s:(!"</script>"i s:. {return s})* "</script>"i
    {
        return {
            kind: "Tag",
            name: "script",
            attributes: attrs.map(function(a) { return a[0] }),
            inner: {
                kind: "Raw",
                value: s.join("")
            }
        }
    }

StyleTag
    = "<style"i _ attrs:(Attribute _)* ">" s:(!"</style>"i s:. {return s})* "</script>"i
    {
        return {
            kind: "Tag",
            name: "style",
            attributes: attrs.map(function(a) { return a[0] }),
            inner: {
                kind: "Raw",
                value: s.join("")
            }
        }
    }

Doctype
    = "<!DOCTYPE "i _ doctype:[^\>]+ _ ">"
    {
        return {
            kind: "Doctype",
            value: doctype.join("").trim()
        }
    }

VoidTag
    = "<" tagName:TagName _ attrs:(Attribute _)* "/>"
    {
        return {
            kind: "Tag",
            name: tagName,
            attributes: attrs.map(function(a) { return a[0] }),
            inner: []
        }
    }

Tag
    = VoidTag
    / openTag:OpenTag inner:Content closeTag:CloseTag
    {
        if (openTag.value !== closeTag.value) {
            throw SyntaxError("Missing closing tag for element "+openTag.value);
        }
        return {
            kind: "Tag",
            name: openTag.value,
            attributes: openTag.attributes,
            inner: inner
        }
    }

OpenTag
    = "<" tagName:TagName _ attrs:(Attribute _)* ">"
    {
        return {
            kind: "String",
            value: tagName,
            attributes: attrs.map(function(a) { return a[0] })
        }
    }

CloseTag
    = "</" tagName:TagName _ ">"
    {
        return {
            kind: "String",
            value: tagName
        }
    }

AttributeName
    = attrName:[^ \t\n\r\"\'\>\/\=]+
    {
        return {
            kind: "String",
            value: attrName.join("")
        }
    }

UnquotedAttributeValue
    = attrValue:[^ \t\n\r\"\'\=\<\>\`]+
    {
        return {
            kind: "String",
            value: attrValue.join("")
        }
    }

QuotedAttributeValue
    = attrValue:( "'" [^\']* "'" / '"' [^\"]* '"')
    {
        return {
            kind: "String",
            value: attrValue[1].join("")
        }
    }

EmptyAttribute
    = attrName:AttributeName
    {
        return {
            kind: "Attribute",
            name: attrName,
            value: attrName
        }
    }

UnquotedAttribute
    = attrName:AttributeName _ "=" _ attrValue:UnquotedAttributeValue
    {
        return {
            kind: "Attribute",
            name: attrName,
            value: attrValue
        }
    }

QuotedAttribute
    = attrName:AttributeName _ "=" _ attrValue:QuotedAttributeValue
    {
        return {
            kind: "Attribute",
            name: attrName,
            value: attrValue
        }
    }

Attribute
    = QuotedAttribute / UnquotedAttribute / EmptyAttribute

TagName
    = tagName:([a-zA-Z0-9\_\-\:]*)
    {
        return tagName.join("")
    }

Text
    = text:[^\<\>{]+
    {
        return {
            kind: "String",
            value: text.join("")
        }
    }

Comment
    = "<!--" c:(!"-->" c:. {return c})* "-->"
    {
        return {
            kind: "CommentHTML",
            value: c.join("")
        }
    }

_ "whitespace"
    = [ \t\n\r]*

