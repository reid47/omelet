{
    /*
    * A function to merge attributes that have the same name.
    *   param: attrList (list of AST Attribute nodes)
    *   param: attrName (string name of attribute to merge)
    */
    function mergeAttributes(attrList,attrName) {
        if (attrList.length < 2) return attrList;

        var toMerge = [];
        var indices = [];

        for (var i=0; i<attrList.length; i++) {
            if (attrList[i].name.value === attrName) {
                toMerge.push(attrList[i]);
                indices.push(i);
            }
        }

        if (toMerge.length == 0) return attrList;

        var newAttrVal = "";
        for (var i=0; i<toMerge.length; i++) {
            newAttrVal += toMerge[i].value.value + " ";
        }
        newAttrVal = newAttrVal.trim();
        toMerge[0].value.value = newAttrVal;

        for (var i=1; i<toMerge.length; i++) {
            attrList.splice(indices[i],1);
        }

        return attrList;
    }
}

//TODO: comments here are not put into AST
Document = _ comms:Comment* _ extend:Extend? _ imports:Import* _ defs:Definition* _ contents:Expression*
    {
        return {
            kind: "Document",
            extend: extend !== null ? extend : undefined,
            imports: imports,
            contents: defs.concat(contents)
        }
    }

Expression
    = Raw / Doctype / Comment / Include / If / For / Tag / Parenthetical / Atom

Identifier
    = ident:([a-zA-z] [a-zA-Z0-9_-]*)
    {
        return {
            kind: "Identifier",
            value: ident[0].concat(ident[1].join(""))
        }
    }

IdentifierComplex
    = ident:([a-zA-z] [a-zA-Z0-9_-]*) mods:Modifier+
    {
        return {
            kind: "Modifier",
            value: ident.join(""),
            modifiers: mods
        }
    }

Modifier
    = ("." mod:Identifier) / ("[" mod:(Number / QuotedString / Identifier) "]")
    {
        return {
            kind: "Modifier",
            value: mod
        }
    }

Raw
    = "<!" r:(!"!>" r:. {return r})* "!>"
    {
        return {
            kind: "Raw",
            value: r.join("")
        }
    }

Number
    = digits:[0-9]+
    {
        return {
            kind: "Number",
            value: parseInt(digits.join(""))
        }
    }

Boolean
    = value:("true"/"false")
    {
        return {
            kind: "Boolean",
            value: value
        }
    }

AttributeName
    = name:([a-zA-Z] [a-zA-Z0-9-]*)
    {
        return {
            kind: "String",
            value: name[0].concat(name[1].join(""))
        }
    }

UnquotedString
    = string:[^\)\|\(\{\\]+
    {
        return {
            kind: "String",
            value: string.join("")
        }
    }

SingleQuotedString
    = "'" value:[^\']* "'"
    {
        return {
            kind: "String",
            value: value.join("")
        }
    }

DoubleQuotedString
    = "\"" value:[^\"]* "\""
    {
        return {
            kind: "String",
            value: value.join("")
        }
    }

QuotedString
    = SingleQuotedString / DoubleQuotedString

Comment
    = "(*" c:(!"*)" c:. {return c})* "*)"
    {
        return {
            kind: "Comment",
            value: c.join("")
        }
    }

FilterArgument
    = _ arg:(Number / QuotedString / Identifier)
    { return arg }

Filter
    = "|" _ name:Identifier args:FilterArgument* _
    {
        return {
            kind: "Filter",
            name: name,
            arguments: args
        }
    }

MacroArgument
    = _ arg:(Number / Boolean / QuotedString / Identifier)
    { return arg }

Interpolation
    = "{" _ name:(IdentifierComplex / Identifier) args:MacroArgument* _ filters:Filter* "}"
    {
        return {
            kind: "Interpolation",
            name: name,
            arguments: args,
            filters: filters
        }
    }

CSSIdentifier
    = id:([a-zA-Z] [a-zA-Z0-9_-]*)
    {
        return {
            kind: "String",
            value: id[0].concat(id[1].join(""))
        }
    }

BasicAttribute
    = name:AttributeName _ "=" _ value:(QuotedString / Interpolation)
    {
        return {
            kind: "Attribute",
            name: name,
            value: value
        }
    }

ClassAttribute
    = "." className:CSSIdentifier
    {
        return {
            kind: "Attribute",
            name: {
                kind: "String",
                value: "class"
            },
            value: className
        }
    }

IdAttribute
    = "#" id:CSSIdentifier
    {
        return {
            kind: "Attribute",
            name: {
                kind: "String",
                value: "id"
            },
            value: id
        }
    }

Attribute
    = _ attr:(BasicAttribute / ClassAttribute / IdAttribute)
    { return attr }

Atom
    = Number / Interpolation / UnquotedString

TagName
    = name:([a-zA-Z] [a-zA-Z0-9_-]*)
    {
        return {
            kind: "String",
            value: name[0].concat(name[1].join(""))
        }
    }

Tag
    = _ "(" name:TagName attrs:Attribute* _ "::" inner:Expression* filters:Filter* ")"
    {
        return {
            kind: "Tag",
            name: name,
            attributes: mergeAttributes(attrs,"class"),
            inner: inner,
            filters: filters
        }
    }

Parenthetical
    = "(" inner:Expression+ filters:Filter* ")"
    {
        return {
            kind: "Parenthetical",
            inner: inner,
            filters: filters
        }
    }

ArrayElement
    = Number / Boolean / QuotedString / Tag

Array
    = "[" elt:ArrayElement elts:("," _ ArrayElement) "]"
    {
        return {
            kind: "Array",
            elements: [elt].concat(elts.map(function(e) { return e[2] }))
        }
    }

Assignment
    = _ "def" _ id:Identifier _ "=" _ val:(Array / Number / Boolean / QuotedString / Tag / Parenthetical) _
    {
        return {
            kind: "Assignment",
            leftSide: id,
            rightSide: val
        }
    }

ParamList
    = params:(Identifier _)*
    { return params.map(function (e) { return e[0] }) }

MacroDefinition
    = _ "def" _ id:Identifier _ params:ParamList _ "=" _ body:Expression
    {
        return {
            kind: "MacroDefinition",
            name: id,
            params: params,
            body: body
        }
    }

Definition
    = Assignment / MacroDefinition

FilePath
    = path:[^ \t\n\r\)]+
    { return path.join("") }

Include
    = "(include " _ path:FilePath _ ")"
    {
        return {
            kind: "Include",
            file: path
        }
    }

Extend
    = "extend " _ path:FilePath _
    {
        return {
            kind: "Extend",
            file: path
        }
    }

Import
    = "import " _ path:FilePath _
    {
        return {
            kind: "Import",
            file: path
        }
    }

Doctype
    = "(doctype " _ val:[^\) \t\r\n]+ ")"
    {
        return {
            kind: "Doctype",
            value: val.join("")
        }
    }

BooleanId
    = b:(Boolean / Parenthetical / Interpolation) _
    { return b }

If
    = _ "(if " _ pred:BooleanId "::" body:Expression* ")" elifs:Elif* elseCase:Else?
    {
        return {
            kind: "IfStatement",
            predicate: pred,
            thenCase: body,
            elifCases: elifs,
            elseCase: elseCase !== null ? elseCase : undefined
        }
    }

Elif
    = _ "(elif " _ pred:BooleanId "::" body:Expression* ")"
    {
        return {
            kind: "IfStatement",
            predicate: pred,
            thenCase: body
        }
    }

Else
    = _ "(else" _ "::" body:Expression* ")"
    { return body }

For
    = _ "(for " _ iter:Identifier _ "in" _ data:Identifier _ "::" body:Expression* ")"
    {
        return {
            kind: "ForEach",
            iterator: iter,
            data: data,
            body: body
        }
    }

_ "whitespace"
    = [ \t\r\n]*

