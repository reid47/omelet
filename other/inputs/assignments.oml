extend aux/doc-page.oml

def page_title = (Assignments)

def page_contents = (

(p :: Omelet allows you to define named objects and assign data to them.
    Note that these are not variables; they are (b::immutable). They can
    be assigned a value only once. Assignments are only allowed at the top
    level of a file. You cannot define a new object inside a tag or another
    definition.)
(p :: An object can be a (b::number), a (b::string), or a (b::block) of Omelet
    code, contained in parentheses. )

(pre.example :: (code.language-omelet ::<!
def aNumber = 47
def aString = "Omelet"
def aTag = (button.big type="submit":: click me!)
def aBlock = (
    (a href="example1.com" :: some link)
    (a href="example2.com" :: some other link)
    (a href="example3.com" :: a third link)
)
def aList = [7,8,9,"ten",(div :: a block!)]
!>| trim))

Assignments only enter objects into scope. They do not appear anywhere in
the compiled HTML. To use the values assigned above, you will need interpolations.

(h2 :: Interpolations)

To display the value of an object, use the name of the object surrounded by
curly braces: (code::<!{!>) and (code::<!}!>). The examples below are a continuation
of those above, so those four objects have already been defined.

(pre.example :: (code.language-omelet ::<!
I am writing this in {aString}, and my favorite number is {aNumber}.
{aTag}
{aBlock}
We can re-use objects, like this: (b::{aString}).
The second element of the list is: {aList[1]}
The fifth element is: {aList[4]}
!>| trim))

(pre.example :: (code.language-html ::
I am writing this in Omelet, and my favorite number is 47.
<button class="big" type="submit">click me!</button>
<a href="example1.com">some link</a>
<a href="example2.com">some other link</a>
<a href="example3.com">a third link</a>
We can re-use objects, like this: <b>Omelet</b>.
The second element of the list is: 8
The fifth element is: <div>a block!</div>
| trim | escape))

)