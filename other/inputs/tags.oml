extend aux/doc-page.oml

def page_title = (Tags)

def page_contents = (

In Omelet, tags look like this:

(pre.example :: (code.language-omelet ::<!
    (h1 :: Hello, world!)
!>| trim))

The above example compiles into this HTML:

(pre.example :: (code.language-html ::
<h1>Hello, world!</h1>
| trim | escape))

Just like in HTML, tags can be nested within each other:

(pre.example :: (code.language-omelet ::<!
(div ::
    (p :: This paragraph element has (b :: bold) text.)
    (p :: This is a second paragraph.))
!>| trim))

(pre.example :: (code.language-html ::<!
<div>
    <p>This paragraph element has <b>bold</b> text.</p>
    <p>This is a second paragraph.</p>
</div>
!>| trim | escape))

(h2 :: Attributes)

Attributes look much like HTML attributes. They must come after
the tag name and before the two colons.

(pre.example :: (code.language-omelet ::<!
(div class="box" ::
    (h1 id="headline" :: This is a headline)
    (p :: This text has a (a href="http://example.com" :: link).))
!>| trim))

(pre.example :: (code.language-html ::<!
<div class="box">
    <h1 id="headline">This is a headline</h1>
    <p>This text has a <a href="http://example.com">link</a>.</p>
</div>
!>| trim | escape))

(h2 :: Special Attributes: (code::class) & (code::id))

Since (code::class) and (code::id) attributes are used so often,
Omelet lets you use a shorthand, CSS-like syntax for these. Note
that only one (code::id) attribute is allowed.

(pre.example :: (code.language-omelet ::<!
(div#box47.box.special ::
    This is a box.)
!>| trim))

(pre.example :: (code.language-html ::<!
<div id="box47" class="box special">
    This is a box.
</div>
!>| trim | escape))

)
